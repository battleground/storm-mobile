apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId 'com.apple.dev'
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 4
        versionName "0.2"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        dev {
            versionName computeVersionName('dev')
            applicationId 'com.apple.dev'
        }
        alpha {
            versionName computeVersionName('alpha')
            applicationId defaultConfig.applicationId + '.alpha'
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['assets']
        }
    }

}

dependencies {
    // =======以下是协助开发测试类库========
    compile 'com.abooc:common-util:0.2.0'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    //    debugCompile 'com.squareup.leakcanary:leakcanary-analyzer:1.3.1'
    // =======以上是协助开发测试类库 END========
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.android.support:cardview-v7:22.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile project(':emptyview')
}


def getDate() {
    def date = new Date()
    def dateFormat = date.format('yyyyMMdd')
    return dateFormat
}

def computeVersionName(label) {
    return "${android.defaultConfig.versionName}.${android.defaultConfig.versionCode}" +
            "${(label == null || "".equals(label)) ? "" : ("-" + label)}-${date}"
}

// The next block is for setting the release signing config from a file outside the git repo
// To make release builds work:
// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
def Properties props = new Properties()
//def propFile = new File(System.getProperty('user.home'), '.sign/signing.properties')
def propFile = new File(".sign/", 'signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        System.err.println propFile.toString() + ' found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    System.err.println propFile.toString() + ' not found'
    android.buildTypes.release.signingConfig = null
}